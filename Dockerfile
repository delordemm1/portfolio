#==============================================================================
# Base Stage
#
# Use the official Bun image. The 'slim' variant is smaller and good for
# production. Using a specific version like '1' is recommended.
#==============================================================================
FROM oven/bun:1-slim AS base
WORKDIR /app

#==============================================================================
# Dependencies Stage
#
# Installs only production dependencies to keep the final image lean.
# Bun automatically reads 'bun.lock' to ensure deterministic installs.
#==============================================================================
FROM base AS deps
WORKDIR /app

# Copy package management files
COPY package.json bun.lock ./

# Install only production dependencies.
RUN bun install --production

#==============================================================================
# Builder Stage
#
# Installs all dependencies (including devDependencies) and builds the
# SvelteKit application.
#==============================================================================
FROM base AS builder
WORKDIR /app

# Copy package management files and install all dependencies for building
COPY package.json bun.lock ./
RUN bun install

# Copy the rest of the application source code
COPY . .

# [Optional] If you have Drizzle migrations to generate during build:
# Ensure your "db:push" script is in package.json
# RUN bun run db:push

# Build the SvelteKit application for production
# Bun will execute the 'build' script from your package.json
RUN bun run build

#==============================================================================
# Runner Stage (Final Production Image)
#
# This is the minimal final image that will be deployed. It contains only
# the built application and the necessary production node_modules.
#==============================================================================
FROM base AS runner
WORKDIR /app

# Set environment variables for the production environment
# SvelteKit with adapter-node will respect the PORT and HOST env vars
ENV NODE_ENV=production
ENV PORT=3000
ENV HOST=0.0.0.0

# Copy production dependencies from the 'deps' stage
COPY --from=deps /app/node_modules ./node_modules

# Copy the built SvelteKit application from the 'builder' stage
# With adapter-node, the output is in the 'build' directory.
COPY --from=builder /app/build ./build
COPY --from=builder /app/package.json ./package.json

# Expose the port the app will run on
EXPOSE 3000

# The command to start the SvelteKit production server.
# This runs the server entrypoint generated by adapter-node.
CMD ["bun", "build/index.js"]